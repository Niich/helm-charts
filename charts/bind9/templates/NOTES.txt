1. You can issue DNS requests using TCP or UDP using the following IP addresses:
{{- if contains "NodePort" .Values.service.type }}
  export NODE_PORT_UDP=$(kubectl get --namespace {{ .Release.Namespace }} -o jsonpath="{.spec.ports[0].nodePort}" services {{ include "bind9.fullname" . }}-dns-udp)
  export NODE_IP_UDP=$(kubectl get nodes --namespace {{ .Release.Namespace }} -o jsonpath="{.items[0].status.addresses[0].address}")
  echo http://$NODE_IP_UDP:$NODE_PORT_UDP

  export NODE_PORT_TCP=$(kubectl get --namespace {{ .Release.Namespace }} -o jsonpath="{.spec.ports[0].nodePort}" services {{ include "bind9.fullname" . }}-dns-tcp)
  export NODE_IP_TCP=$(kubectl get nodes --namespace {{ .Release.Namespace }} -o jsonpath="{.items[0].status.addresses[0].address}")
  echo http://$NODE_IP_TCP:$NODE_PORT_TCP
{{- else if contains "LoadBalancer" .Values.service.type }}
     NOTE: It may take a few minutes for the LoadBalancer IP to be available.
           You can watch the status of by running
             'kubectl get --namespace {{ .Release.Namespace }} svc {{ include "bind9.fullname" . }}-dns-udp'
             'kubectl get --namespace {{ .Release.Namespace }} svc {{ include "bind9.fullname" . }}-dns-tcp'
export SERVICE_IP_UDP=$(kubectl get svc --namespace {{ .Release.Namespace }} {{ include "bind9.fullname" . }}-dns-udp --template "{{"{{ range (index .status.loadBalancer.ingress 0) }}{{.}}{{ end }}"}}")
export SERVICE_IP_TCP=$(kubectl get svc --namespace {{ .Release.Namespace }} {{ include "bind9.fullname" . }}-dns-tcp --template "{{"{{ range (index .status.loadBalancer.ingress 0) }}{{.}}{{ end }}"}}")

echo "For example, using dig you could use:"
echo "dig @$SERVICE_IP_UDP b1-systems.de"
echo "dig @$SERVICE_IP_TCP b1-systems.de"
{{- else if contains "ClusterIP" .Values.service.type }}
  export POD_NAME=$(kubectl get pods --namespace {{ .Release.Namespace }} -l "app.kubernetes.io/name={{ include "bind9.name" . }},app.kubernetes.io/instance={{ .Release.Name }}" -o jsonpath="{.items[0].metadata.name}")
  export CONTAINER_PORT=$(kubectl get pod --namespace {{ .Release.Namespace }} $POD_NAME -o jsonpath="{.spec.containers[0].ports[0].containerPort}")
  echo "Visit http://127.0.0.1:8080 to use your application"
  kubectl --namespace {{ .Release.Namespace }} port-forward $POD_NAME 8080:$CONTAINER_PORT
{{- end }}
